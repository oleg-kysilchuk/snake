{"version":3,"sources":["webpack://webpck/./src/styles/style.scss?c414","webpack://webpck/webpack/bootstrap","webpack://webpck/webpack/runtime/make namespace object","webpack://webpck/./src/js/bundle.js"],"names":["document","addEventListener","startBtn","getElementById","scoreDisplay","grids","querySelectorAll","width","currentIndex","appleIndex","currentSnake","direction","score","speed","intervalTime","interval","startGame","forEach","index","classList","remove","clearInterval","textContent","randomizeApple","add","setInterval","snakeOut","contains","snakeTail","pop","unshift","push","Math","floor","random","length","snakeControl","e","keyCode"],"mappings":"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","file":"bundle.js","sourcesContent":["// extracted by mini-css-extract-plugin\nexport {};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import '../styles/style.scss';\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    const startBtn = document.getElementById('start');\r\n    const scoreDisplay = document.getElementById('score');\r\n    const grids = document.querySelectorAll('.game-grid div');\r\n\r\n    const width = 10; // width of game field\r\n    let currentIndex = 0; // first div on game field\r\n    let appleIndex = 0;\r\n    let currentSnake = [0,1,2]; // 2 (3rd element in game filed divs array) - snake's head and 0 (first div) - snake's tail\r\n    let direction = 1; // snake always goes on 1 div\r\n    let score = 0;\r\n    let speed = 0.9; //speed multiplier\r\n    let intervalTime = 0;\r\n    let interval = 0;\r\n\r\n\r\n    function startGame() {\r\n       currentSnake.forEach(index => {\r\n           grids[index].classList.remove('snake');\r\n       })\r\n       grids[appleIndex].classList.remove('apple');\r\n       clearInterval(interval);\r\n       score = 0;\r\n       scoreDisplay.textContent = score;\r\n       randomizeApple();\r\n       direction = 1;\r\n       intervalTime = 1000;\r\n       currentSnake = [2,1,0];\r\n       currentIndex = 0; // reseting all game properties\r\n\r\n       currentSnake.forEach((index) => {\r\n           grids[index].classList.add('snake');\r\n       }) // adding snake to start position\r\n\r\n       interval = setInterval(snakeOut, intervalTime);\r\n    }\r\n\r\n    function snakeOut() {\r\n        if(\r\n            (currentSnake[0] + width >= width*width && direction === width) ||\r\n            (currentSnake[0] % width === width-1 && direction === 1) ||\r\n            (currentSnake[0] % width === 0 && direction === -1) ||\r\n            (currentSnake[0] - width < 0 && direction === -width) ||\r\n            grids[currentSnake[0] + direction].classList.contains('snake')\r\n        ) { \r\n            scoreDisplay.textContent = `Game over! You got ${score} scores!`\r\n            return clearInterval(interval)\r\n        }\r\n\r\n        const snakeTail = currentSnake.pop();\r\n        grids[snakeTail].classList.remove('snake'); // remove 1 block from snake (the tail)\r\n        currentSnake.unshift(currentSnake[0] + direction);\r\n\r\n        if(grids[currentSnake[0]].classList.contains('apple')) {\r\n            grids[currentSnake[0]].classList.remove('apple');\r\n            grids[snakeTail].classList.add('snake');\r\n            currentSnake.push(snakeTail);\r\n            randomizeApple();\r\n            score++;\r\n            scoreDisplay.textContent = score;\r\n            clearInterval(interval);\r\n            intervalTime *= speed;\r\n            interval = setInterval(snakeOut, intervalTime);\r\n        }\r\n\r\n        grids[currentSnake[0]].classList.add('snake');\r\n    }\r\n\r\n\r\n    function randomizeApple() {\r\n        do {\r\n            appleIndex = Math.floor(Math.random() * grids.length)\r\n        } while (grids[appleIndex].classList.contains('snake'));\r\n        grids[appleIndex].classList.add('apple');\r\n    }\r\n\r\n\r\n    function snakeControl(e){\r\n        grids[currentIndex].classList.remove('snake');\r\n\r\n        switch(e.keyCode) {\r\n            case 39:\r\n                direction = 1; // RIGHT arrow button moves snake to 1 div right\r\n                break;\r\n            case 40:\r\n                direction = +width; // DOWN arrow - to 10 divs down (1row)\r\n                break;\r\n            case 37:\r\n                direction = -1; // LEFT arrow - 1 div left\r\n                break;\r\n            case 38:\r\n                direction = -width; // UP arrow - 1 row up (10 divs)\r\n                break\r\n        }\r\n    }\r\n\r\n    document.addEventListener('keyup', snakeControl);\r\n    startBtn.addEventListener('click', startGame);\r\n})"],"sourceRoot":""}